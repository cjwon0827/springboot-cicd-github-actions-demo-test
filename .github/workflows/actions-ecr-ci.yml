# 워크플로우 이름 정의
name: Spring Boot CI Pipeline

# 워크플로우 트리거 조건 설정
on:
 push:
   branches: [ "main" ]  # main 브랜치에 push 이벤트 발생시에만 실행

# 워크플로우에서 사용할 환경 변수 설정
env:
 AWS_REGION: ap-northeast-2  # AWS 리전을 서울로 설정

# 실행할 작업(job) 정의
jobs:
 build:
   runs-on: ubuntu-latest   # Ubuntu 최신 버전의 러너에서 실행
   permissions:             # OIDC 인증을 위한 권한 설정
     id-token: write        # JWT 토큰 생성 권한
     contents: read         # 레포지토리 읽기 권한

   # 작업 단계(step) 정의
   steps:
     # 1. GitHub 레포지토리 코드를 러너에 체크아웃
     - name: Checkout code
       uses: actions/checkout@v3  # GitHub 제공 액션 사용

     # 2. JDK 17 설치 및 설정
     - name: Set up JDK 17
       uses: actions/setup-java@v3  # Java 설정 액션
       with:
         java-version: '17'         # Java 버전
         distribution: 'temurin'     # 배포판 종류
         cache: gradle              # Gradle 캐시 사용

     # 3. 프로덕션 환경 설정 파일 생성
     - name: Create application-prod.yml
       run: |
         cat << EOF > ./src/main/resources/application-prod.yml
         temp:
           test:
             value: ${CURRENT_ENV}
         EOF

     # 4. AWS 자격 증명 구성 (OIDC 방식)
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v4
       with:
         role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsOIDC  # 사용할 IAM 역할 (앞서 만들었던 OIDC 인증 ROLE)
         aws-region: ${{ env.AWS_REGION }}  # AWS 리전 설정

     # 5. Gradle 스크립트 실행 권한 부여
     - name: Grant execute permission for gradlew
       run: chmod +x gradlew

     # 6. Gradle을 사용한 프로젝트 빌드 (테스트 제외)
     - name: Build with Gradle
       run: ./gradlew build -x test

     # 7. 단위 테스트 실행
     - name: Run tests
       run: ./gradlew test

     # 8. AWS ECR 로그인
     - name: Login to Amazon ECR
       id: login-ecr  # 다음 단계에서 참조하기 위한 ID
       uses: aws-actions/amazon-ecr-login@v2

     # 9. Docker 이미지 빌드 및 ECR 푸시
     - name: Build and Push Docker image
       env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}  # ECR 레지스트리 주소
         ECR_REPOSITORY: github-actions-cicd-demo                # 생성한 ECR 레포지토리 이름
         IMAGE_TAG: ${{ github.sha }}                          # 커밋 해시를 이미지 태그로 사용
       run: |
         # 두 가지 태그로 이미지 빌드: 커밋 해시용, latest용
         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
         
         # 빌드된 이미지를 ECR에 푸시
         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
         docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

     # 10. Docker 레이어 캐싱 설정
     - name: Cache Docker layers
       uses: actions/cache@v3
       with:
         path: /tmp/.buildx-cache  # 캐시 저장 경로
         key: ${{ runner.os }}-buildx-${{ github.sha }}  # 캐시 키 (OS와 커밋 해시 조합)
         restore-keys: |           # 일치하는 캐시가 없을 때 사용할 대체 키
           ${{ runner.os }}-buildx-

     # 11. 테스트 결과 아티팩트로 저장
     - name: Upload test results
       if: always()  # 테스트 성공/실패 관계없이 항상 실행
       uses: actions/upload-artifact@v3
       with:
         name: test-results  # 아티팩트 이름
         path: build/reports/tests/  # 테스트 결과 경로